        -:    0:Source:active_object.hpp
        -:    0:Graph:server.gcno
        -:    0:Data:server.gcda
        -:    0:Runs:1
        -:    1:// active_object.hpp
        -:    2:#ifndef ACTIVE_OBJECT_HPP
        -:    3:#define ACTIVE_OBJECT_HPP
        -:    4:
        -:    5:#include <queue>
        -:    6:#include <mutex>
        -:    7:#include <condition_variable>
        -:    8:#include <thread>
        -:    9:#include <functional>
        -:   10:#include <memory>
        -:   11:#include <future>
        -:   12:
        -:   13:// Template class for processing tasks asynchronously
        -:   14:template<typename T>
        -:   15:class ActiveObject {
        -:   16:private:
        -:   17:    bool running;
        -:   18:    std::queue<std::function<void()>> message_queue;
        -:   19:    std::mutex queue_mutex;
        -:   20:    std::condition_variable condition;
        -:   21:    std::thread worker_thread;
        -:   22:
        -:   23:    // Worker thread function
        2:   24:    void run() {
        8:   25:        while (running) {
        4:   26:            std::function<void()> task;
        -:   27:            {
        4:   28:                std::unique_lock<std::mutex> lock(queue_mutex);
        4:   29:                condition.wait(lock, [this] { 
        8:   30:                    return !message_queue.empty() || !running; 
        -:   31:                });
        -:   32:                
        4:   33:                if (!running && message_queue.empty()) {
        2:   34:                    return;
        -:   35:                }
        -:   36:                
        2:   37:                task = std::move(message_queue.front());
        2:   38:                message_queue.pop();
        4:   39:            }
        -:   40:            // Execute the task
        2:   41:            task();
        -:   42:        }
        -:   43:    }
        -:   44:
        -:   45:public:
        -:   46:    // Constructor - starts the worker thread
        2:   47:    ActiveObject() : running(true) {
        2:   48:        worker_thread = std::thread(&ActiveObject::run, this);
        2:   49:    }
        -:   50:
        -:   51:    // Destructor - ensures clean shutdown
    #####:   52:    ~ActiveObject() {
        -:   53:        {
    #####:   54:            std::lock_guard<std::mutex> lock(queue_mutex);
    #####:   55:            running = false;
    #####:   56:        }
    #####:   57:        condition.notify_one();
    #####:   58:        if (worker_thread.joinable()) {
    #####:   59:            worker_thread.join();
        -:   60:        }
    #####:   61:    }
        -:   62:
        -:   63:    // Enqueues a task and returns a future
        -:   64:    template<typename F>
        2:   65:    std::future<T> enqueue(F&& f) {
        2:   66:        auto task = std::make_shared<std::packaged_task<T()>>(std::forward<F>(f));
        2:   67:        auto future = task->get_future();
        -:   68:        
        -:   69:        {
        2:   70:            std::lock_guard<std::mutex> lock(queue_mutex);
        6:   71:            message_queue.emplace([task]() { 
        2:   72:                (*task)(); 
        -:   73:            });
        2:   74:        }
        2:   75:        condition.notify_one();
        4:   76:        return future;
        2:   77:    }
------------------
_ZN12ActiveObjectI9MSTResultE7enqueueIZN6Server18processMSTPipelineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlvE0_EESt6futureIS0_EOT_:
        1:   65:    std::future<T> enqueue(F&& f) {
        1:   66:        auto task = std::make_shared<std::packaged_task<T()>>(std::forward<F>(f));
        1:   67:        auto future = task->get_future();
        -:   68:        
        -:   69:        {
        1:   70:            std::lock_guard<std::mutex> lock(queue_mutex);
        1:   71:            message_queue.emplace([task]() { 
        -:   72:                (*task)(); 
        -:   73:            });
        1:   74:        }
        1:   75:        condition.notify_one();
        2:   76:        return future;
        1:   77:    }
------------------
_ZN12ActiveObjectI9MSTResultE7enqueueIZN6Server18processMSTPipelineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlvE_EESt6futureIS0_EOT_:
        1:   65:    std::future<T> enqueue(F&& f) {
        1:   66:        auto task = std::make_shared<std::packaged_task<T()>>(std::forward<F>(f));
        1:   67:        auto future = task->get_future();
        -:   68:        
        -:   69:        {
        1:   70:            std::lock_guard<std::mutex> lock(queue_mutex);
        1:   71:            message_queue.emplace([task]() { 
        -:   72:                (*task)(); 
        -:   73:            });
        1:   74:        }
        1:   75:        condition.notify_one();
        2:   76:        return future;
        1:   77:    }
------------------
        -:   78:
        -:   79:    // Delete copy constructor and assignment operator
        -:   80:    ActiveObject(const ActiveObject&) = delete;
        -:   81:    ActiveObject& operator=(const ActiveObject&) = delete;
        -:   82:};
        -:   83:
        -:   84:#endif // ACTIVE_OBJECT_HPP
